# -*- coding: utf-8 -*-
"""TEAM9_NETWORK_SECURITY_PROJECT_S-DES.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_-wHbb3MnxLx1CRmbuJCHChavAWgEzUO

**<CENTER><H1> CSE3045- NETWORK SECURITY AND CRYPTOGRAPHY FUNDAMENTALS </CENTER>**

**<CENTER><H1> SLOT - B1</CENTER>**

**<CENTER><H1>REVIEW 2</CENTER>**

**KEY- GENERATION**
"""

# p8 and p10 are for storing permutation key
p8=[6, 3, 7, 4, 8, 5, 10, 9]

p10=[3, 5, 2, 7, 4, 10, 1, 9, 8, 6]


# k1, k2 are for storing interim keys
len_p10 = len(p10)
len_p10_half = int(len(p10)/2)

temp = [None] * len_p10
LS1 = [None] * len_p10
LS2 = [None] * len_p10
k1 = [None] * len(p8)
k2 = [None] * len(p8)
 
# Read 10 bits from user...
ip = input("Enter 10 bits input:") #1010000010

ip = list(ip)
print(ip)

print(f"p10                :{p10}")
# Applying p10...
for i in range(len_p10):
    temp[i] = ip[p10[i]-1]

print(f"Bits after p10     :{temp}\n")

# Performing LS-1 on first half of temp
for i in range(len_p10_half):
    if i==len_p10_half-1:
        LS1[i]=temp[0]
    else:
        LS1[i]=temp[i+1]
        
#print(f"Output after LS-1 -First Half: {LS1}")

# Performing LS-1 on second half of temp
for i in range(len_p10_half, len(temp)):
    if i==len_p10-1:
        LS1[i]=temp[len_p10_half]
    else:
        LS1[i]=temp[i+1]

print(f"Output after LS-1:{LS1}\n")
print(f"p8               :{p8}")
# Applying p8...
for i in range(len(p8)):
    k1[i] = LS1[p8[i]-1]
    
k1_data = "".join(k1)

print(f"Your sub-key-1 is: {k1_data}\n")

# Performing LS-2 on first half of LS1
for i in range(len_p10_half):
    if i>=len_p10_half-2:
        LS2[i]=LS1[i-(len_p10_half-2)]
    else:
        LS2[i]=LS1[i+2]
        
#print(f"Output after LS-2 -First Half: {LS2}")

# Performing LS-2 on second half of LS1
for i in range(len_p10_half, len(LS1)):
    if i>=len_p10-2:
        LS2[i]=LS1[i-(len_p10_half-2)]
    else:
        LS2[i]=LS1[i+2]

print(f"Output after LS-2:{LS2}\n")

print(f"p8               :{p8}")
# Applying p8...
for i in range(len(p8)):
  k2[i] = LS2[p8[i]-1]

k2_data = "".join(k2[0:len(p8)])

print(f"Your sub-key 2 is: {k2_data}\n")

"""**S-DES Implementation - Scratch**"""

FIXED_IP = [2, 6, 3, 1, 4, 8, 5, 7]
FIXED_EP = [4, 1, 2, 3, 2, 3, 4, 1]
FIXED_IP_INVERSE = [4, 1, 3, 5, 7, 2, 8, 6]
FIXED_P10 = [3, 5, 2, 7, 4, 10, 1, 9, 8, 6]
FIXED_P8 = [6, 3, 7, 4, 8, 5, 10, 9]
FIXED_P4 = [2, 4, 3, 1]

S0 = [[1, 0, 3, 2],
      [3, 2, 1, 0],
      [0, 2, 1, 3],
      [3, 1, 3, 2]]

S1 = [[0, 1, 2, 3],
      [2, 0, 1, 3],
      [3, 0, 1, 0],
      [2, 1, 0, 3]]

KEY = '0111111101'


def permutate(original, fixed_key):
    new = ''
    for i in fixed_key:
        new += original[i - 1]
    return new


def left_half(bits):
    return bits[:int(len(bits)/2)]


def right_half(bits):
    return bits[int(len(bits)/2):]


def shift(bits):
    rotated_left_half = left_half(bits)[1:] + left_half(bits)[0]
    rotated_right_half = right_half(bits)[1:] + right_half(bits)[0]
    return rotated_left_half + rotated_right_half


def key1():
    return permutate(shift(permutate(KEY, FIXED_P10)), FIXED_P8)


def key2():
    return permutate(shift(shift(shift(permutate(KEY, FIXED_P10)))), FIXED_P8)


def xor(bits, key):
    new = ''
    for bit, key_bit in zip(bits, key):
        new += str(((int(bit) + int(key_bit)) % 2))
    return new


def lookup_in_sbox(bits, sbox):
    row = int(bits[0] + bits[3], 2)
    col = int(bits[1] + bits[2], 2)
    return '{0:02b}'.format(sbox[row][col])


def f_k(bits, key):
    L = left_half(bits)
    R = right_half(bits)
    bits = permutate(R, FIXED_EP)
    bits = xor(bits, key)
    bits = lookup_in_sbox(left_half(bits), S0) + lookup_in_sbox(right_half(bits), S1)
    bits = permutate(bits, FIXED_P4)
    return xor(bits, L)


def encrypt(plain_text):
    bits = permutate(plain_text, FIXED_IP)
    temp = f_k(bits, key1())
    bits = right_half(bits) + temp
    bits = f_k(bits, key2())
    print("Encrypted message: "+str(permutate(bits + temp, FIXED_IP_INVERSE)))


def decrypt(cipher_text):
    bits = permutate(cipher_text, FIXED_IP)
    temp = f_k(bits, key2())
    bits = right_half(bits) + temp
    bits = f_k(bits, key1())
    print("Decrypted message: "+str(permutate(bits + temp, FIXED_IP_INVERSE))) 

key = str(input("Enter the 10-bit key: "))
print("KEY ACCEPTED\n")
encrypt(str(input("Enter a 8-bit plain text: ")))
print("ENCRYPTION DONE!\n")
decrypt(str(input("Enter a 8-bit cipher text: ")))
print("DECRYPTION DONE!\n")

"""**S- DES IMPLEMENTATION USING MODULES - PyCryptodome**"""

pip install PyCryptodome

from Crypto.Cipher import DES
from secrets import token_bytes

#to genrate the key 
key = token_bytes(8)

def encrypt(msg):
  cipher = DES.new(key, DES.MODE_EAX)
  nonce = cipher.nonce
  ciphertext, tag = cipher.encrypt_and_digest(msg.encode('ascii'))
  return nonce, ciphertext, tag

def decrypt(nonce, ciphertext, tag):
  cipher = DES.new(key, DES.MODE_EAX, nonce=nonce)
  plaintext = cipher.decrypt(ciphertext)
  try:
    cipher.verify(tag)
    return plaintext.decode('ascii')
  except:
    return False

nonce, ciphertext, tag = encrypt(input('Enter a message: '))
plaintext = decrypt(nonce, ciphertext, tag)

print(f'Cipher Text: {ciphertext}')
if not plaintext:
  print('Message is corrupted')
else:
  print(f'Plain Text: {plaintext}')

"""**DES Data Encryption Standard (General) - from scratch implementation**"""

# Hexadecimal to binary conversion
def hex2bin(s):
    mp = {'0' : "0000",
          '1' : "0001",
          '2' : "0010",
          '3' : "0011",
          '4' : "0100",
          '5' : "0101",
          '6' : "0110",
          '7' : "0111",
          '8' : "1000",
          '9' : "1001",
          'A' : "1010",
          'B' : "1011",
          'C' : "1100",
          'D' : "1101",
          'E' : "1110",
          'F' : "1111" }
    bin = ""
    for i in s:
        bin = bin + mp[i]
    return bin

# Binary to hexadecimal conversion
def bin2hex(s):
    mp = {"0000" : '0',
          "0001" : '1',
          "0010" : '2',
          "0011" : '3',
          "0100" : '4',
          "0101" : '5',
          "0110" : '6',
          "0111" : '7',
          "1000" : '8',
          "1001" : '9',
          "1010" : 'A',
          "1011" : 'B',
          "1100" : 'C',
          "1101" : 'D',
          "1110" : 'E',
          "1111" : 'F' }
    hex = ""
    for i in range(0,len(s),4):
        ch = ""
        ch = ch + s[i]
        ch = ch + s[i + 1]
        ch = ch + s[i + 2]
        ch = ch + s[i + 3]
        hex = hex + mp[ch]
         
    return hex

# Binary to decimal conversion
def bin2dec(binary):
    decimal, i, n = 0, 0, 0
    while(binary != 0):
        dec = binary % 10
        decimal = decimal + dec * pow(2, i)
        binary = binary//10
        i += 1
    return decimal

# Decimal to binary conversion
def dec2bin(num):
    bin_val = bin(num).replace("0b", "")
    rem = len(bin_val)%4
    if rem == 0:
      extra_bits = 0
    else:
      extra_bits = 4 - rem
    bin_val = "0"*extra_bits + bin_val
    return bin_val

# Permute function to rearrange the bits
def permute(k, arr, n):
    permutation = ""
    for i in range(0, n):
        permutation = permutation + k[arr[i] - 1]
    return permutation

# shifting the bits towards left by nth shifts
def shift_left(k, nth_shifts):
    
    for i in range(nth_shifts):
        s = ""
        for j in range(1,len(k)):
            s = s + k[j]
        s = s + k[0]
        k = s
    return k

# calculating xor of two strings of binary number a and b
def xor(a, b):
    ans = ""
    for i, j in zip(a, b):
        if i == j:
            ans = ans + "0"
        else:
            ans = ans + "1"
    return ans

# Table of Position of 64 bits at initial level: Initial Permutation Table
initial_perm = [58, 50, 42, 34, 26, 18, 10, 2,
                60, 52, 44, 36, 28, 20, 12, 4,
                62, 54, 46, 38, 30, 22, 14, 6,
                64, 56, 48, 40, 32, 24, 16, 8,
                57, 49, 41, 33, 25, 17, 9, 1,
                59, 51, 43, 35, 27, 19, 11, 3,
                61, 53, 45, 37, 29, 21, 13, 5,
                63, 55, 47, 39, 31, 23, 15, 7]

# Expansion D-box Table
exp_d = [32, 1 , 2 , 3 , 4 , 5 , 4 , 5,
         6 , 7 , 8 , 9 , 8 , 9 , 10, 11,
         12, 13, 12, 13, 14, 15, 16, 17,
         16, 17, 18, 19, 20, 21, 20, 21,
         22, 23, 24, 25, 24, 25, 26, 27,
         28, 29, 28, 29, 30, 31, 32, 1 ]

# Straight Permutation Table
per = [ 16,  7, 20, 21,
        29, 12, 28, 17,
         1, 15, 23, 26,
         5, 18, 31, 10,
         2,  8, 24, 14,
        32, 27,  3,  9,
        19, 13, 30,  6,
        22, 11,  4, 25 ]

# S-box Table
sbox =  [[[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
          [ 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
          [ 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
          [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 ]],
            
         [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
            [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
            [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
           [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 ]],
   
         [ [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
           [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
           [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
            [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 ]],
       
          [ [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
           [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
           [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
            [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14] ],
        
          [ [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
           [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
            [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
           [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 ]],
       
         [ [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
           [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
            [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
            [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13] ],
         
          [ [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
           [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
            [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
            [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12] ],
        
         [ [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
            [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
            [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
            [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11] ] ]

# Final Permutation Table
final_perm = [ 40, 8, 48, 16, 56, 24, 64, 32,
               39, 7, 47, 15, 55, 23, 63, 31,
               38, 6, 46, 14, 54, 22, 62, 30,
               37, 5, 45, 13, 53, 21, 61, 29,
               36, 4, 44, 12, 52, 20, 60, 28,
               35, 3, 43, 11, 51, 19, 59, 27,
               34, 2, 42, 10, 50, 18, 58, 26,
               33, 1, 41, 9, 49, 17, 57, 25 ]

def encrypt(pt, rkb, rk):
    pt = hex2bin(pt)
     
    # Initial Permutation
    pt = permute(pt, initial_perm, 64)
    print("After initial permutation", bin2hex(pt))
     
    # Splitting
    left = pt[0:32]
    right = pt[32:64]
    for i in range(0, 16):
        #  Expansion D-box: Expanding the 32 bits data into 48 bits
        right_expanded = permute(right, exp_d, 48)
         
        # XOR RoundKey[i] and right_expanded
        xor_x = xor(right_expanded, rkb[i])
 
        # S-boxex: substituting the value from s-box table by calculating row and column
        sbox_str = ""
        for j in range(0, 8):
            row = bin2dec(int(xor_x[j * 6] + xor_x[j * 6 + 5]))
            col = bin2dec(int(xor_x[j * 6 + 1] + xor_x[j * 6 + 2] + xor_x[j * 6 + 3] + xor_x[j * 6 + 4]))
            val = sbox[j][row][col]
            sbox_str = sbox_str + dec2bin(val)
             
        # Straight D-box: After substituting rearranging the bits 
        sbox_str = permute(sbox_str, per, 32)
         
        # XOR left and sbox_str
        result = xor(left, sbox_str)
        left = result
         
        # Swapper
        if(i != 15):
            left, right = right, left
        print("Round ", i + 1, " ", bin2hex(left), " ", bin2hex(right), " ", rk[i])
     
    # Combination
    combine = left + right
     
    # Final permutation: final rearranging of bits to get cipher text
    cipher_text = permute(combine, final_perm, 64)
    return cipher_text

pt = "123456ABCD132536"

key = "AABB09182736CCDD"

# Key generation
# --hex to binary
key = hex2bin(key)

# --parity bit drop table
keyp = [57, 49, 41, 33, 25, 17, 9,
        1, 58, 50, 42, 34, 26, 18,
        10, 2, 59, 51, 43, 35, 27,
        19, 11, 3, 60, 52, 44, 36,
        63, 55, 47, 39, 31, 23, 15,
        7, 62, 54, 46, 38, 30, 22,
        14, 6, 61, 53, 45, 37, 29,
        21, 13, 5, 28, 20, 12, 4 ]

# getting 56 bit key from 64 bit using the parity bits
key = permute(key, keyp, 56)

# Number of bit shifts
shift_table = [1, 1, 2, 2,
                2, 2, 2, 2,
                1, 2, 2, 2,
                2, 2, 2, 1 ]

# Key- Compression Table : Compression of key from 56 bits to 48 bits
key_comp = [14, 17, 11, 24, 1, 5,
            3, 28, 15, 6, 21, 10,
            23, 19, 12, 4, 26, 8,
            16, 7, 27, 20, 13, 2,
            41, 52, 31, 37, 47, 55,
            30, 40, 51, 45, 33, 48,
            44, 49, 39, 56, 34, 53,
            46, 42, 50, 36, 29, 32 ]

# Splitting
left = key[0:28]    # rkb for RoundKeys in binary
right = key[28:56]  # rk for RoundKeys in hexadecimal
 
rkb = []
rk  = []

for i in range(0, 16):
    # Shifting the bits by nth shifts by checking from shift table
    left = shift_left(left, shift_table[i])
    right = shift_left(right, shift_table[i])
     
    # Combination of left and right string
    combine_str = left + right
     
    # Compression of key from 56 to 48 bits
    round_key = permute(combine_str, key_comp, 48)
  
    rkb.append(round_key)
    rk.append(bin2hex(round_key))
 
print("Encryption")
cipher_text = bin2hex(encrypt(pt, rkb, rk))
print("Cipher Text : ",cipher_text)
 
print("Decryption")
rkb_rev = rkb[::-1]
rk_rev = rk[::-1]
text = bin2hex(encrypt(cipher_text, rkb_rev, rk_rev))
print("Plain Text : ",text)

"""**Simplified AES Implementation**"""

import sys

sbox = [0x9, 0x4, 0xa, 0xb, 0xd, 0x1, 0x8, 0x5,0x6, 0x2, 0x0, 0x3, 0xc, 0xe, 0xf, 0x7]

#inverse s-box
sbox_inv = [0xa, 0x5, 0x9, 0xb, 0x1, 0x7, 0x8, 0xf, 0x6, 0x0, 0x2, 0x3, 0xc, 0x4, 0xd, 0xe]

wt = [None] * 6             #there is no null keyword in Python

def product(p1,p2):
  p = 0
  while p2:
    if p2 & 0b1:
      p ^= p1
    p1 <<=1
    if p1 & 0b10000:
      p1 ^= 0b11
    p2 >>= 1
  return p & 0b1111

def integertovector(n):
  #convert a 2 byte integer into a 4 element vector
  return [n >> 12, (n >> 4) & 0xf, (n >> 8) & 0xf,  n & 0xf]

def vectortointeger(m):
  #convert a 4 element vector into a 2 byte integer
  return (m[0] << 12) + (m[2] << 8) + (m[1] << 4) + m[3]

def addkeys(s1, s2): 
    return [i ^ j for i, j in zip(s1, s2)]
     
def sub4niblist(sbox, s):
    return [sbox[e] for e in s]
     
def shiftdaRow(s):
    return [s[0], s[1], s[3], s[2]]

def keyexpansion(key):
#Generate the three round keys
    def sub2(b):
#Swap each nibble and substitute it using sBox
        return sbox[b >> 4] + (sbox[b & 0x0f] << 4)
 
    R1, R2 = 0b10000000, 0b00110000
    wt[0] = (key & 0xff00) >> 8
    wt[1] = key & 0x00ff
    wt[2] = wt[0] ^ R1 ^ sub2(wt[1])
    wt[3] = wt[2] ^ wt[1]
    wt[4] = wt[2] ^ R2 ^ sub2(wt[3])
    wt[5] = wt[4] ^ wt[3]

def encryptaes(ptext):
  def mixCol(s):
        return [s[0] ^ product(4, s[2]), s[1] ^ product(4, s[3]),
                s[2] ^ product(4, s[0]), s[3] ^ product(4, s[1])]

  state = integertovector((wt[0] << 8) + wt[1] ^ ptext)
  state = mixCol(shiftdaRow(sub4niblist(sbox, state)))
  state = addkeys(integertovector((wt[2] << 8) + wt[3]), state)
  state = shiftdaRow(sub4niblist(sbox, state))
  return vectortointeger(addkeys(integertovector((wt[4] << 8) + wt[5]), state))

def decryptaes(ctext):
#Decrypt ciphertext block
    def MixCol_inv(s):
        return [product(9, s[0]) ^ product(2, s[2]), product(9, s[1]) ^ product(2, s[3]),
                product(9, s[2]) ^ product(2, s[0]), product(9, s[3]) ^ product(2, s[1])]
     
    state = integertovector(((wt[4] << 8) + wt[5]) ^ ctext)
    state = sub4niblist(sbox_inv, shiftdaRow(state))
    state = MixCol_inv(addkeys(integertovector((wt[2] << 8) + wt[3]), state))
    state = sub4niblist(sbox_inv, shiftdaRow(state))
    return vectortointeger(addkeys(integertovector((wt[0] << 8) + wt[1]), state))

if __name__ == '__main__':
  plaintext = 0b1101011100101000
  key = 0b0100101011110101
  ciphertext = 0b0010010011101100
  keyexpansion(key)

  
print("Encrypted plaintext :", encryptaes(plaintext))    
print("Decrypted ciphertext :", decryptaes(ciphertext))

"""**AES Encryption with Python libraries**"""

!pip install pycrypto

import os 
import Crypto.Cipher

"""**AES Encoding with Cipher Block Chaining (CBC)**"""

#generating a random string of 16-byte
from os import urandom

secret_key_CBC = urandom(16)
print('Secret Key : ', secret_key_CBC)
print('\n')

#randomizing 16-byte string for initialization vector
iv_CBC = urandom(16)
print('Initialization Vector :', iv_CBC)
print('\n')

from Crypto.Cipher import AES

obj_CBC = AES.new(secret_key_CBC, AES.MODE_CBC, iv_CBC)

# Encrypt the message
msg_CBC = 'Hello World, its me'
print('Original message is: ', msg_CBC)
if len(msg_CBC) % 16 == 0:
  entext_CBC = obj_CBC.encrypt(msg)
else:
  entext_CBC = obj_CBC.encrypt(msg * 16)
print('The encrypted text :', entext_CBC)
print('\n')

# Decrypt the message
rev_obj_CBC = AES.new(secret_key_CBC, AES.MODE_CBC, iv_CBC)

dectext_CBC = rev_obj_CBC.decrypt(entext_CBC)
dectext_CBC = dectext_CBC[0: len(dectext_CBC)//16]
print('The decrypted text :', dectext_CBC.decode('utf-8'))
print('\n')

"""**AES Encoding with Cipher Feedback (CFB)**"""

#generating a random string of 16-byte
from os import urandom

secret_key_CFB = urandom(16)
print('Secret Key : ', secret_key_CFB)
print('\n')

#randomizing 16-byte string for initialization vector
iv_CFB = urandom(16)
print('Initialization Vector :', iv_CFB)
print('\n')

from Crypto.Cipher import AES

obj_CFB = AES.new(secret_key_CFB, AES.MODE_CFB, iv_CFB)

# Encrypt the message
msg_CFB = 'Hello World, its me'
print('Original message is: ', msg_CFB)
if len(msg_CFB) % 16 == 0:
  entext_CFB = obj_CFB.encrypt(msg_CFB)
else:
  entext_CFB = obj_CFB.encrypt(msg_CFB * 16)
print('The encrypted text :', entext_CFB)
print('\n')

# Decrypt the message
rev_obj_CFB = AES.new(secret_key_CFB, AES.MODE_CFB, iv_CFB)

dectext_CFB = rev_obj_CFB.decrypt(entext_CFB)
dectext_CFB = dectext_CFB[0: len(dectext_CFB)//16]
print('The decrypted text :', dectext_CFB.decode('utf-8'))
print('\n')

"""**THANK YOU**

Compilled by:<br>
Gaurav Trivedi    19MIA1077<br>
Harshini Aiyyer   19MIA1050<br>
Jay Kumar Patel   19MIA1032<br>


"""